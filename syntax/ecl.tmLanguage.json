{
  "name": "Eclipse",
  "scopeName": "source.ecl",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#keywords" },
    { "include": "#literals" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ecl",
          "match": "//.*$"
        },
        {
          "name": "comment.block.ecl",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "name": "comment.block.documentation.ecl",
              "begin": "/\\*\\*",
              "end": "\\*/"
            }
          ]
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.ecl",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.ecl",
          "match": "\\\\."
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.identifier.ecl",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "name": "constant.numeric.integer.ecl",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.float.ecl",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.language.boolean.ecl",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ecl",
          "match": "\\b(if|else|while|for|return|break|continue|func|import)\\b"
        },
        {
          "name": "keyword.declaration.ecl",
          "match": "\\b(var|int|float|string|bool|function|struct|enum)\\b"
        },
        {
          "name": "keyword.operator.ecl",
          "match": "\\b(and|or|not)\\b"
        }
      ]
    }
  }
}
